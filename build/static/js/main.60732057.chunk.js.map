{"version":3,"sources":["components/BaArednMap.jsx","components/Header.jsx","App.jsx","serviceWorker.js","index.js"],"names":["PurpleIcon","Icon","iconUrl","iconSize","OrangeIcon","BlueIcon","MagentaIcon","GrayIcon","getIcon","freq","includes","BaArednMap","state","zoom","mapCenter","lat","lon","this","props","appConfig","length","rfconns","tunconns","nodes","done","nodesData","forEach","n","canonicalHostname","node","fn","link_info","m","tn","hostname","to","conn","linkType","push","mapSettings","Map","ref","className","center","scrollWheelZoom","TileLayer","attribution","url","Polyline","color","weight","positions","dashArray","map","Marker","toUpperCase","key","position","icon","meshrf","Popup","href","target","style","verticalAlign","node_details","description","status","ssid","channel","chanbw","interfaces","mac","model","width","firmware_version","whiteSpace","onClick","openPopup","id","popup","refs","fireLeafletEvent","replace","Component","Header","band","filter","Image","src","countNodes","App","axios","get","ip","sysinfo","resource","params","nodeInfo","data","Object","keys","setState","console","log","name","hosts","alertify","alert","regex","RegExp","nodesFilter","filteredNodeList","h","trim","match","retrieveNodeDetails","document","title","contactInfo","callsign","process","getNodesData","Boolean","window","location","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.60732057.chunk.js","sourcesContent":["// @flow\n\nimport React, { Component } from \"react\";\nimport { Map, TileLayer, Marker, Popup, Polyline } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\n\nconst PurpleIcon = new Icon({\n  iconUrl: \"./purpleRadioCircle-icon.png\",\n  iconSize: [25, 25],\n})\n\nconst OrangeIcon = new Icon({\n  iconUrl: \"./goldRadioCircle-icon.png\",\n  iconSize: [25, 25],\n})\n\nconst BlueIcon = new Icon({\n  iconUrl: \"./blueRadioCircle-icon.png\",\n  iconSize: [25, 25],\n})\n\nconst MagentaIcon = new Icon({\n  iconUrl: \"./magentaRadioCircle-icon.png\",\n  iconSize: [25, 25],\n})\n\nconst GrayIcon = new Icon({\n  iconUrl: \"./grayRadioCircle-icon.png\",\n  iconSize: [25, 25],\n})\n\n// Function to get the Freq Icon\nfunction getIcon(freq){\n  if(freq !== null && typeof freq !== 'undefined' )\n  {\n    if(freq.includes(\"2.\")) {\n      return PurpleIcon;\n    }\n    else if(freq.includes(\"5.\")){\n      return OrangeIcon;\n    }\n    else if(freq.includes(\"3.\")){\n      return BlueIcon;\n    }\n    else if (freq.includes(\"900\")){\n      return MagentaIcon;\n    }\n  }\n  return GrayIcon;\n}\n\nclass BaArednMap extends Component {\n\n  state = {\n      //appConfig: this.props.appConfig,\n      zoom: 9.5,\n      mapCenter: {\n        lat: 18.2,\n        lon: -66.3,\n      }\n  }\n\n  componentDidMount() {\n    //this.setState({appConfig: this.props.appConfig})\n    //console.log(this.state,\"ACTUAL STATE\")\n  }\n\n  render() {\n    //console.log(this.props.appConfig,\"appConfig\")\n    if(this.props.appConfig.length === 0) {\n      return null;\n    }\n    else {\n      //const mapCenter = [this.state.mapCenter.lat, this.state.mapCenter.lon];\n      const rfconns = [];\n      const tunconns = [];\n      const nodes = {};\n      const done = {};\n      this.props.nodesData.forEach(n => nodes[this.canonicalHostname(n.node)] = n);\n      this.props.nodesData.forEach(n => {\n        if (!n.lat || !n.lon) {\n          return;\n        }\n        const fn = this.canonicalHostname(n.node);\n        n.link_info.forEach(m => {\n          const tn = this.canonicalHostname(m.hostname);\n          const to = nodes[tn];\n          if (to) {\n            if (!to.lat || !to.lon || done[`${tn}/${fn}`]) {\n              return;\n            }\n            const conn = [ [ n.lat, n.lon ], [ to.lat, to.lon ] ];\n            switch (m.linkType) {\n              case 'RF':\n                rfconns.push(conn);\n                break;\n              case 'TUN':\n                tunconns.push(conn);\n                break;\n              case 'DTD':\n              default:\n                break;\n            }\n            done[`${tn}/${fn}`] = true;\n            done[`${fn}/${tn}`] = true;\n          }\n        });\n      });\n      const mapCenter = [this.props.appConfig.mapSettings.mapCenter.lat, this.props.appConfig.mapSettings.mapCenter.lon];\n      return (\n        <Map ref=\"map\" className=\"Map\" center={mapCenter} zoom={this.props.appConfig.mapSettings.zoom} scrollWheelZoom={false}>\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            //url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            url=\"http://kn6plv-tiles.local.mesh/tile/{z}/{x}/{y}.png\"\n          />\n          <Polyline color=\"lime\" weight=\"2\" positions={rfconns} />\n          <Polyline color=\"grey\" weight=\"1\" dashArray=\"5 5\" positions={tunconns} />\n          { this.props.nodesData.map(n =>\n            <Marker ref={n.node.toUpperCase()} key={n.node} position={[n.lat,n.lon]} icon={ getIcon(n.meshrf.freq) }>\n              <Popup> {\n                <div><h6><a href={`http://${n.node}.local.mesh`} target=\"_blank\">{n.node}</a></h6>\n                  <table>\n                    <tr style={{verticalAlign:\"top\"}}><td>Desc</td><td>{n.node_details.description}</td></tr>\n                    <tr><td>Location</td><td>{n.lat},{n.lon}</td></tr>\n                    <tr><td>RF Status</td><td>{n.meshrf.status}</td></tr>\n                    { n.meshrf.status === 'on' && <tbody>\n                        <tr><td>SSID</td><td>{n.meshrf.ssid}</td></tr>\n                        <tr><td>RF Channel</td><td>{n.meshrf.channel}</td></tr>\n                        <tr><td>RF Freq</td><td>{n.meshrf.freq}</td></tr>\n                        <tr><td>Bandwidth</td><td>{n.meshrf.chanbw} MHz</td></tr>\n                        <tr><td>MAC</td><td>{n.interfaces[0].mac}</td></tr>\n                        </tbody>\n                    }\n                    <tr style={{verticalAlign:\"top\"}}><td>Model</td><td>{n.node_details.model}</td></tr>\n                    <tr><td width=\"80\">Firmware</td><td>{n.node_details.firmware_version}</td></tr>\n                    <tr style={{verticalAlign:\"top\",whiteSpace:\"nowrap\"}}><td>Neighbors</td><td> {\n                      n.link_info.map(m => <div key={m.hostname}><a href=\"#\" onClick={()=>this.openPopup(m.hostname)}>{this.canonicalHostname(m.hostname)}</a> { m.linkType ? `(${m.linkType})` : \"\" } </div>)\n                    } </td></tr>\n                  </table>\n                </div>\n              } </Popup>\n            </Marker>)\n          }\n        </Map>\n      );\n    }\n  }\n\n  openPopup(id) {\n    const popup = this.refs[this.canonicalHostname(id)];\n    if (popup) {\n      popup.fireLeafletEvent('click');\n    }\n  }\n\n  canonicalHostname(hostname) {\n    return hostname.replace(/^\\./, '').replace(/\\.local\\.mesh$/i,'').toUpperCase()\n  }\n}\n\nexport default BaArednMap;\n","import React, { Component } from \"react\";\nimport { Row, Col, Image } from \"react-bootstrap\";\nclass Header extends Component {\n    state = {  }\n\n    countNodes(nodesData, band) {\n        switch(band) {\n            case 900:\n                //console.log(\"900\", nodesList)\n                //console.log(nodesList, \"nodeslist\")\n                return nodesData.filter(n => n.meshrf.status === \"on\" && n.meshrf.freq.includes(\"900\")).length\n            case 24:\n                //console.log(\"es 2.4\")\n                //console.log(nodesData.filter(n => n.meshrf.status == \"on\" && n.meshrf.freq.includes(\"2.\")).length)\n                return nodesData.filter(n => n.meshrf.status === \"on\" && n.meshrf.freq.includes(\"2.\")).length\n\n            case 34:\n                //console.log(\"es 2.4\")\n                //console.log(nodesData.filter(n => n.meshrf.status == \"on\" && n.meshrf.freq.includes(\"2.\")).length)\n                return nodesData.filter(n => n.meshrf.status === \"on\" && n.meshrf.freq.includes(\"3.\")).length\n\n            case 58:\n                //console.log(\"es 2.4\")\n                //console.log(nodesData.filter(n => n.meshrf.status == \"on\" && n.meshrf.freq.includes(\"2.\")).length)\n                return nodesData.filter(n => n.meshrf.status === \"on\" && n.meshrf.freq.includes(\"5.\")).length\n\n            case 0:\n                return nodesData.filter(n => n.meshrf.status === \"off\").length\n\n            default:\n                return nodesData.filter(n => n.meshrf.status === \"off\").length\n        }\n    }\n\n    render() {\n        return (\n            <table className=\"Header\">\n                <tr>\n                    <th>Band</th>\n                    <th>Nodes</th>\n                </tr>\n                <tr>\n                    <td>  <Image src=\"./magentaRadioCircle-icon.png\" width={20}></Image> 900 Mhz </td>\n                    <td># { this.countNodes(this.props.nodesData, 900)} </td>\n                </tr>\n                <tr>\n                    <td> <Image src=\"./purpleRadioCircle-icon.png\" width={20}></Image> 2.4 Ghz </td>\n                    <td> # {this.countNodes(this.props.nodesData, 24)}</td>\n                </tr>\n                <tr>\n                    <td> <Image src=\"./blueRadioCircle-icon.png\" width={20}></Image> 3.4 Ghz </td>\n                    <td> # {this.countNodes(this.props.nodesData, 34)}</td>\n                </tr>\n                <tr>\n                    <td><Image src=\"./goldRadioCircle-icon.png\" width={20}></Image> 5Ghz </td>\n                    <td># {this.countNodes(this.props.nodesData, 58)}</td>\n                </tr>\n                <tr>\n                    <td><Image src=\"./grayRadioCircle-icon.png\" width={20}></Image> Mesh RF Off </td>\n                    <td># {this.countNodes(this.props.nodesData, 0)}</td>\n                </tr>\n            </table>\n        );\n    }\n}\n\nexport default Header;\n","// @flow\n\nimport \"leaflet/dist/leaflet.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport React, { Component } from \"react\";\nimport BaArednMap from \"./components/BaArednMap\"\nimport sysinfo from \"./APIResources.json\"\nimport axios from \"axios\"\nimport alertify from 'alertifyjs'\nimport \"alertifyjs/build/css/themes/default.min.css\"\nimport \"alertifyjs/build/css/alertify.min.css\"\nimport Header from './components/Header'\n\n\nclass App extends Component {\n\n  state = {\n    appConfig: [],\n    nodesData: []\n  }\n\n  // Get the details from the node. Recieves the name of the node.\n  async retrieveNodeDetails(node)\n  {\n    try {\n    const nodeInfo = await axios.get(`http://${node.ip}${sysinfo.resource}/?${sysinfo.params.link_info}`)\n\n    if (nodeInfo.status === 200)\n    {   if(nodeInfo.lat !== \"\") {\n        const node = {\n              node: nodeInfo.data.node,\n              lat: nodeInfo.data.lat,\n              lon: nodeInfo.data.lon,\n              meshrf : nodeInfo.data.meshrf,\n              chanbw: nodeInfo.data.chanbw,\n              node_details: nodeInfo.data.node_details,\n              interfaces: nodeInfo.data.interfaces,\n              link_info: Object.keys(nodeInfo.data.link_info).map((key) => nodeInfo.data.link_info[key])\n        }\n\n      //  Add this node to the state\n      this.setState({nodesData: [...this.state.nodesData, node]})\n      //console.log(\"nodesData\",this.state.nodesData)\n      }\n    }\n    else {}\n  }  catch(e) {console.log(`There was an error getting ${node.name} details`)}\n  }\n\n  async getNodesData() {\n    try {\n    // Get the list of nodes / hosts before to retrieve the nodes information.\n    //const nodes =  await axios.get(`http://${mynode.name}${sysinfo.resource}${sysinfo.params.hosts}`)\n    const nodes =  await axios.get(`http://localnode.local.mesh${sysinfo.resource}${sysinfo.params.hosts}`)\n\n    if(nodes.status !== 200) {\n      //alert(\"ERROR\")\n      alertify.alert(\"Unable to find your AREDN node, please verify if you are connected to the MESH.\");\n    }\n\n    else {\n    // Get only the ones that matches the format CALLSIGN-CITY-COUNTRY-TYPE#NODENUMBER\n    const regex = new RegExp(this.state.appConfig.nodesFilter);\n    //const regex = \"[a-zA-z]+[0-9][a-zA-Z]+[-][a-zA-Z]+[-][a-zA-Z]+[-][a-zA-Z]*[1-9]+\"\n\n    //const regex = new RegExp(\"[a-zA-z]\");\n\n    console.log(regex,\"REGEX\")\n    //console.log(this.state.appConfig.nodesFilter, \"NODESFILTER\")\n    const filteredNodeList = nodes.data.hosts.filter(h => h.name.toUpperCase().trim().match(regex))\n    console.log(\"Filtered Node List\",filteredNodeList)\n\n    // Iterate thru each node to get the details.\n    Object.keys(filteredNodeList).forEach((key) => {\n      this.retrieveNodeDetails(filteredNodeList[key])\n    });\n  }\n}\n  catch(e) {\n    alertify.alert(\"Unable to find your AREDN node, please verify if you are connected to the MESH.\");\n  }\n}\n\n  async componentDidMount() {\n    const appConfig = await axios.get('appConfig.json')\n    //console.log(appConfig.data)\n    this.setState({appConfig: appConfig.data})\n    //console.log(appConfig.data,\"appConfig.data\")\n    //console.log(this.state,\"STATE\")\n    document.title = `${this.state.appConfig.contactInfo.callsign} - ${process.env.REACT_APP_NAME} ${process.env.REACT_APP_VERSION} by ${process.env.REACT_APP_CREATOR}`;\n    this.getNodesData();\n    //console.log(this.state.appConfig.app.nodesFilter, \"NODES FILTER\")\n  }\n\n  render() {\n    return (\n      //<Container fluid>\n        <div>\n          <Header nodesData={this.state.nodesData} appConfig={this.state.appConfig}/>\n          <BaArednMap nodesData={this.state.nodesData} appConfig={this.state.appConfig}/>\n        </div>\n      //</Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}