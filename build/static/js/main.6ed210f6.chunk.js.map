{"version":3,"sources":["components/BaArednMap.jsx","components/Header.jsx","App.jsx","serviceWorker.js","index.js"],"names":["PurpleIcon","Icon","iconUrl","iconSize","OrangeIcon","BlueIcon","MagentaIcon","GrayIcon","getIcon","freq","includes","BaArednMap","state","zoom","mapCenter","lat","lon","this","props","appConfig","length","mapSettings","Map","ref","className","center","scrollWheelZoom","TileLayer","attribution","url","nodesData","map","n","Marker","node","key","position","icon","meshrf","Popup","href","target","node_details","description","status","ssid","channel","interfaces","mac","model","firmware_version","link_info","m","hostname","onClick","openPopup","replace","linkType","id","popup","refs","fireLeafletEvent","Component","Header","band","filter","Fragment","Row","Col","xs","lg","Image","src","logoPath","width","fluid","countNodes","App","axios","get","ip","sysinfo","resource","params","nodeInfo","data","Object","keys","setState","console","log","name","hosts","nodes","alertify","alert","regex","RegExp","nodesFilter","filteredNodeList","h","toUpperCase","trim","match","forEach","retrieveNodeDetails","document","title","contactInfo","callsign","process","getNodesData","Boolean","window","location","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6ed210f6.chunk.js","sourcesContent":["// @flow\n\nimport React, { Component } from \"react\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport { Icon } from \"leaflet\";\n\nconst PurpleIcon = new Icon({\n  iconUrl: \"./purpleRadioCircle-icon.png\",\n  iconSize: [25, 25],\n})\n\nconst OrangeIcon = new Icon({\n  iconUrl: \"./goldRadioCircle-icon.png\",\n  iconSize: [25, 25],\n})\n\nconst BlueIcon = new Icon({\n  iconUrl: \"./blueRadioCircle-icon.png\",\n  iconSize: [25, 25],\n})\n\nconst MagentaIcon = new Icon({\n  iconUrl: \"./magentaRadioCircle-icon.png\",\n  iconSize: [25, 25],\n})\n\nconst GrayIcon = new Icon({\n  iconUrl: \"./grayRadioCircle-icon.png\",\n  iconSize: [25, 25],\n})\n\n// Function to get the Freq Icon\nfunction getIcon(freq){\n  if(freq !== null && typeof freq !== 'undefined' )\n  {\n    if(freq.includes(\"2.\")) {\n      return PurpleIcon;\n    }\n    else if(freq.includes(\"5.\")){\n      return OrangeIcon;\n    }\n    else if(freq.includes(\"3.\")){\n      return BlueIcon;\n    }\n    else if (freq.includes(\"900\")){\n      return MagentaIcon;\n    }\n  }\n  return GrayIcon;\n}\n\nclass BaArednMap extends Component {\n\n  state = {\n      //appConfig: this.props.appConfig,\n      zoom: 9.5,\n      mapCenter: {\n        lat: 18.2,\n        lon: -66.3,\n      }\n  }\n\n  componentDidMount() {\n    //this.setState({appConfig: this.props.appConfig})\n    //console.log(this.state,\"ACTUAL STATE\")\n  }\n\n  render() {\n    //console.log(this.props.appConfig,\"appConfig\")\n    if(this.props.appConfig.length === 0) {\n      return null;\n    }\n    else {\n      //const mapCenter = [this.state.mapCenter.lat, this.state.mapCenter.lon];\n      const mapCenter = [this.props.appConfig.mapSettings.mapCenter.lat, this.props.appConfig.mapSettings.mapCenter.lon];\n      return (\n        <Map ref=\"map\" className=\"Map\" center={mapCenter} zoom={this.props.appConfig.mapSettings.zoom} scrollWheelZoom={false}>\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n            { this.props.nodesData.map(n =>\n              <Marker ref={n.node} key={n.node} position={[n.lat,n.lon]} icon={ getIcon(n.meshrf.freq) }>\n                <Popup> {\n                  <div><h6><a href={`http://${n.node}.local.mesh`} target=\"_blank\">{n.node}</a></h6>\n                  <p>\n                    Desc: {n.node_details.description}<br/>\n                    Position: ({n.lat},{n.lon})<br/>\n                    RF Status: {n.meshrf.status}<br/>\n                    SSID: {n.meshrf.ssid}<br/>\n                    RF Channel: {n.meshrf.channel}<br/>\n                    RF Freq: {n.meshrf.freq}<br/>\n                    MAC: {n.interfaces[0].mac}<br/>\n                    Model: {n.node_details.model}<br/>\n                    Firmware Ver: {n.node_details.firmware_version}<br/>\n                    </p>\n                    Neighbors:<br/><ul> {\n                      n.link_info.map(m => <li key={m.hostname}><a href=\"#\" onClick={()=>this.openPopup(m.hostname.replace(/\\.local\\.mesh$/,''))}>{m.hostname.replace(/\\.local\\.mesh$/,'')}</a> { m.linkType ? `(${m.linkType})` : \"\" } </li>)\n                    } </ul>\n                  </div>\n                }\n              </Popup>\n            </Marker>)}\n        </Map>\n      );\n    }\n  }\n\n  openPopup(id) {\n    const popup = this.refs[id];\n    if (popup) {\n      popup.fireLeafletEvent('click');\n    }\n  }\n}\n\nexport default BaArednMap;\n","import React, { Component } from \"react\";\nimport { Row, Col, Image } from \"react-bootstrap\";\nclass Header extends Component {\n    state = {  }\n\n    countNodes(nodesData, band) {\n        switch(band) {\n            case 900:\n                //console.log(\"900\", nodesList)\n                //console.log(nodesList, \"nodeslist\")\n                return nodesData.filter(n => n.meshrf.status === \"on\" && n.meshrf.freq.includes(\"900\")).length\n            case 24:\n                //console.log(\"es 2.4\")\n                //console.log(nodesData.filter(n => n.meshrf.status == \"on\" && n.meshrf.freq.includes(\"2.\")).length)\n                return nodesData.filter(n => n.meshrf.status === \"on\" && n.meshrf.freq.includes(\"2.\")).length\n\n            case 34:\n                //console.log(\"es 2.4\")\n                //console.log(nodesData.filter(n => n.meshrf.status == \"on\" && n.meshrf.freq.includes(\"2.\")).length)\n                return nodesData.filter(n => n.meshrf.status === \"on\" && n.meshrf.freq.includes(\"3.\")).length\n\n            case 58:\n                //console.log(\"es 2.4\")\n                //console.log(nodesData.filter(n => n.meshrf.status == \"on\" && n.meshrf.freq.includes(\"2.\")).length)\n                return nodesData.filter(n => n.meshrf.status === \"on\" && n.meshrf.freq.includes(\"5.\")).length\n            \n            case 0:\n                return nodesData.filter(n => n.meshrf.status === \"off\").length\n\n            default: \n                return nodesData.filter(n => n.meshrf.status === \"off\").length\n        }\n    }\n\n    render() { \n\n            return ( <React.Fragment> \n            \n            <Row>\n                <Col xs lg=\"2\"> \n                    <Image src={this.props.appConfig.logoPath} width={225} fluid></Image> \n                </Col>                      \n                <Col xs lg=\"8\"></Col>             \n                <Col >                             \n                     <table>\n                         <tr>\n                             <th>Band</th>\n                             <th>Nodes</th>\n                         </tr>\n                         \n                         <tr>\n                            <td>  <Image src=\"./magentaRadioCircle-icon.png\" width={20}></Image> 900 Mhz </td>\n                            <td># { this.countNodes(this.props.nodesData, 900)} </td>\n                         </tr>\n                         \n                         <tr>\n                             <td> <Image src=\"./purpleRadioCircle-icon.png\" width={20}></Image> 2.4 Ghz </td>\n                             <td> # {this.countNodes(this.props.nodesData, 24)}</td>\n                         </tr>\n                         \n                         <tr>\n                             <td> <Image src=\"./blueRadioCircle-icon.png\" width={20}></Image> 3.4 Ghz </td>\n                             <td> # {this.countNodes(this.props.nodesData, 34)}</td>\n                         </tr>\n                         \n                         <tr>\n                            <td><Image src=\"./goldRadioCircle-icon.png\" width={20}></Image> 5Ghz </td>\n                            <td># {this.countNodes(this.props.nodesData, 58)}</td>\n                         </tr>\n                         <tr>\n                            <td><Image src=\"./grayRadioCircle-icon.png\" width={20}></Image> Mesh RF Off </td>\n                            <td># {this.countNodes(this.props.nodesData, 0)}</td>\n                         </tr>\n                         \n                         \n                     </table>\n                    \n                </Col>\n               \n            </Row>\n            <br/>\n            </React.Fragment> );\n    }\n}\n \nexport default Header;","// @flow\n\nimport \"leaflet/dist/leaflet.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport React, { Component } from \"react\";\nimport BaArednMap from \"./components/BaArednMap\"\nimport sysinfo from \"./APIResources.json\"\nimport axios from \"axios\"\nimport alertify from 'alertifyjs'\nimport \"alertifyjs/build/css/themes/default.min.css\"\nimport \"alertifyjs/build/css/alertify.min.css\"\nimport Header from './components/Header'\n\n\nclass App extends Component {\n\n  state = {\n    appConfig: [],\n    nodesData: []\n  }\n  \n  // Get the details from the node. Recieves the name of the node.\n  async retrieveNodeDetails(node)\n  {\n    try {\n    const nodeInfo = await axios.get(`http://${node.ip}${sysinfo.resource}/?${sysinfo.params.link_info}`)\n\n    if (nodeInfo.status === 200)\n    {   if(nodeInfo.lat !== \"\") {\n        const node = {\n              node: nodeInfo.data.node,\n              lat: nodeInfo.data.lat,\n              lon: nodeInfo.data.lon,\n              meshrf : nodeInfo.data.meshrf,\n              node_details: nodeInfo.data.node_details,\n              interfaces: nodeInfo.data.interfaces,\n              link_info: Object.keys(nodeInfo.data.link_info).map((key) => nodeInfo.data.link_info[key])\n        }\n      \n      //  Add this node to the state\n      this.setState({nodesData: [...this.state.nodesData, node]})\n      //console.log(\"nodesData\",this.state.nodesData)\n      } \n    }\n    else {}\n  }  catch(e) {console.log(`There was an error getting ${node.name} details`)}\n  }\n\n  async getNodesData() {\n    try {\n    // Get the list of nodes / hosts before to retrieve the nodes information.\n    //const nodes =  await axios.get(`http://${mynode.name}${sysinfo.resource}${sysinfo.params.hosts}`) \n    const nodes =  await axios.get(`http://localnode.local.mesh${sysinfo.resource}${sysinfo.params.hosts}`) \n\n    if(nodes.status !== 200) {\n      //alert(\"ERROR\")\n      alertify.alert(\"Unable to find your AREDN node, please verify if you are connected to the MESH.\");\n    }\n\n    else {\n    // Get only the ones that matches the format CALLSIGN-CITY-COUNTRY-TYPE#NODENUMBER \n    const regex = new RegExp(this.state.appConfig.nodesFilter);\n    //const regex = \"[a-zA-z]+[0-9][a-zA-Z]+[-][a-zA-Z]+[-][a-zA-Z]+[-][a-zA-Z]*[1-9]+\"\n\n    //const regex = new RegExp(\"[a-zA-z]\");\n\n    console.log(regex,\"REGEX\")\n    //console.log(this.state.appConfig.nodesFilter, \"NODESFILTER\")\n    const filteredNodeList = nodes.data.hosts.filter(h => h.name.toUpperCase().trim().match(regex))\n    console.log(\"Filtered Node List\",filteredNodeList)\n\n    // Iterate thru each node to get the details.\n    Object.keys(filteredNodeList).forEach((key) => {\n      this.retrieveNodeDetails(filteredNodeList[key])\n    });\n  }\n}\n  catch(e) {\n    alertify.alert(\"Unable to find your AREDN node, please verify if you are connected to the MESH.\");\n  }\n}\n\n  async componentDidMount() {\n    const appConfig = await axios.get('appConfig.json')\n    //console.log(appConfig.data)\n    this.setState({appConfig: appConfig.data})\n    //console.log(appConfig.data,\"appConfig.data\")\n    //console.log(this.state,\"STATE\")\n    document.title = `${this.state.appConfig.contactInfo.callsign} - ${process.env.REACT_APP_NAME} ${process.env.REACT_APP_VERSION} by ${process.env.REACT_APP_CREATOR}`;\n    this.getNodesData();\n    //console.log(this.state.appConfig.app.nodesFilter, \"NODES FILTER\")\n  }\n\n  render() {\n    return (\n      //<Container fluid>\n        <div>       \n          <Header nodesData={this.state.nodesData} appConfig={this.state.appConfig}></Header>      \n          <BaArednMap nodesData={this.state.nodesData} appConfig={this.state.appConfig}/>                  \n        </div>\n      //</Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}